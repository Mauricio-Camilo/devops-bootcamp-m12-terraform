Nesse projeto, será usado o repositório java-maven-app, na branch jenkinsfile-sshagent, que usa o shared library, e tem uma mudança no estágio de deploy:

                script {
                    echo 'deploying docker image to EC2...'
                        
                    def shellCmd = "bash ./server-cmds.sh ${IMAGE_NAME}"
                    def ec2Instance = "ec2-user@$35.180.151.121"

                    sshagent(['server-ssh-key']) {
                        sh "scp -o server-cmds.sh ${ec2Instance}:/home/ec2-user"
                        sh "scp -o docker-compose.yaml ${ec2Instance}:/home/ec2-user"
                        sh "ssh -o StrictHostKeyChecking=no ${ec2Instance} ${shellCmd}"
                    }
                }
 
 Esse script configura um ssh agent para se conectar a instancia ec2 e copia um docker compose e um script de execução na instancia.
 
 Create key pair for ec2 instance
 
 Nesse passo, foi criada uma key pair manualmente dentro do console da aws, ao invés de usar o terraform. Em seguida, essa key pair foi importada dentro da pipeline no Jenkins como uma credencial do tipo SSH Username with private key. Com isso, essa chave será associada a instancia ec2 que será criada pelo terraform.
 
 Install terraform inside Jenkins
 
 Para fazer a instalação, foi usada a conexão ssh para se conectar na máquina ao qual o Jenkins está instalado, e entrou-se no container como usuário root. O sistema operacional da máquina usada nesse projeto é Debian distribution, então foram usados os comandos da documentação oficial do terraform para instalação nesse sistema.
 
 Terraform configuration file
 
 O código do terraform usado para criar os recursos desse projeto é o mesmo usado no repositório: (link do repositório) (ou projeto), com alguns ajustes:
 
 - Remoção do key pair resource, pois criamos uma manualmente na AWS
 - Dentro do resource aws_instance, colocar o nome da chave criada na AWS
 - Atualizar o entry-script para ao invés de rodar um docker container, instalar o docker compose
 - As variáveis fora inseridas com o parâmetro default, e não por meio do uso do terraform.tfvars
 
 Provision stage in Jenkinsfile
 
 Foi adicionado o estágio de provisionamento de recursos antes do estágio de deploy:
 
        stage ("provision server") {
            environment {
                AWS_ACCESS_KEY_ID = credentials('jenkins-aws_access_key_id')
                AWS_SECRET_ACCESS_KEY = credentials('jenkins-aws_secret_access_key')
                TF_VAR_env_prefix = 'test'
            }
            steps {
                script {
                    dir('terraform') {
                        sh "terraform init"
                        sh "teraform apply --auto-approve"
                        EC2_PUBLIC_IP = sh (
                            script: "terraform output ec2_public_ip"
                            returnStdout: true
                        ).trim()

                    }
                 }
            }
        }
        
 As variáveis de ambiente setadas servem para que o terraform se conecte a conta da aws na qual serão criados os recursos, e os valores de access e secret já estavam salvas nas credenciais do Jenkins. Com essa autenticação, é possível rodar os comandos de terraform dentro do diretório na qual se encontram os arquivos tf. O ultimo comando do script serve para salvar o valor do output que contém o public ip da nstancia, para ser setada dinamicamente no próximo estágio.
 
 Deploy stage 
 
 Algumas alterações devem ser feitas no estágio de deploy, para que a aplicação seja deployada na instancia criada no estagio de provisioning.
 
 
                     def ec2Instance = "ec2-user@${EC2_PUBLIC_IP}"
 O estágio de deploy para ser executado com sucesso, precisa esperar o estágio anterior finalizar as tarefas, ou seja, criar a instancia e liberar o public ip, e isso demora um certo tempo. Para contornar esse problema, foi adicionada a linha de sleep no deploy antes da execução dos comandos.
 
 Uma ultima configuração foi adicionar o ip do jenkins no security group da instancia.
 
 Docker login to pull docker image
 
 O Jenkins deve ser capaz de executar também o docker login de dentro do servidor. Para isso, dentro do arquivo de server-cmds, foi adicionado o comando docker login antes de executar o docker compose.
 
 export DOCKER_USER=$2
export DOCKER_PWD=$3
echo $DOCKER_PWD | docker login -u $DOCKER_USER --password-stdin

Os valores de docker user e login estão salvas como credenciais no Jenkins, então elas serão passadas como variáveis de ambiente no Jenkinsfile

            environment {
                DOCKER_CREDS = credentials('docker-hub-repo')
            }

           def shellCmd = "bash ./server-cmds.sh ${IMAGE_NAME} ${DOCKER_CREDS_USR} ${DOCKER_CREDS_PSW}"
           
Após fazer esse ultimos ajustes, a pipeline foi capaz de rodar com sucesso, criando os recursos na aws e rodando a aplicação dentro da instância ec2.           

            

 
 
 



